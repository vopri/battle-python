import logging
import random
import time
from typing import NewType, Optional

from battle_snake.entities import (
    Board,
    FutureSnake,
    NextStep,
    PossibleFutureBoard,
    Recorder,
)

logging.basicConfig(encoding="utf-8", level=logging.INFO)


def get_info() -> dict:
    """
    Battlesnake appearance and author.
    For customization options, see https://docs.battlesnake.com/references/personalization
    """
    return {
        "apiversion": "1",
        "author": "vopri",
        "color": "#ff9900",
        "head": "fang",
        "tail": "hook",
    }


FORECAST_DEPTH = 7


class MoveDecision:
    """Decision maker for the next move of my snake."""

    def __init__(self, game_request: dict):
        self._start_time: int = time.perf_counter_ns()
        self.board: Board = Board.from_dict(game_request)
        self.future_board: PossibleFutureBoard = PossibleFutureBoard(self.board)
        self._history = MyFutureHistory()
        self.future_board.register_recorder(self._history)
        self.tactics = Tactics(self._history)

    def decide(self) -> NextStep:
        """Find decision for next step for my snake"""
        for _ in range(FORECAST_DEPTH - 1):
            if self._is_ready_for_decision():
                break
            self.future_board.next_turn()
        logging.info(f"Posisition of my snake: {self.board.my_snake}")
        decision = self.tactics.decide()
        logging.info(f"Decision for next step: {decision}")
        return decision

    def _is_ready_for_decision(self) -> bool:
        survivors = self.future_board.get_my_survived_snakes()
        first_steps = {snake.get_my_first_step() for snake in survivors}
        return len(first_steps) < 2


AmountOfSteps = NewType("AmountOfSteps", int)
AmountOfSnakesAlive = NewType("AmountOfSnakesAlive", int)


class MyFutureHistory(Recorder):
    """Recorder of information of my snake generated by simulations from PossibleFutureBoard."""

    def __init__(self):
        self._found_first_food_after_n_steps: dict[  # type: ignore
            NextStep, Optional[AmountOfSteps]
        ] = self._init_food_dict()
        self._counter_of_snakes_alive_after_n_steps: dict[  # type: ignore
            NextStep, dict[AmountOfSteps, AmountOfSnakesAlive]
        ] = self._init_count_alive_dict()
        self._current_future_board: PossibleFutureBoard = None  # type: ignore
        self._dangerous_snake_first_step: dict[NextStep, bool] = dict()

    def _init_food_dict(self) -> dict[NextStep, None]:
        return {
            NextStep.UP: None,
            NextStep.DOWN: None,
            NextStep.LEFT: None,
            NextStep.RIGHT: None,
        }

    def _init_count_alive_dict(self) -> dict[NextStep, dict]:
        return {
            NextStep.UP: dict(),
            NextStep.DOWN: dict(),
            NextStep.LEFT: dict(),
            NextStep.RIGHT: dict(),
        }

    def save(self, future_board: PossibleFutureBoard) -> None:
        self._current_future_board = future_board
        for my_snake in future_board.get_my_survived_snakes():
            self._check_for_food(my_snake)
            self._increment_snake_alive_counter(my_snake)
            self._check_for_dangerous_snake_in_first_step(my_snake)

    def _check_for_food(self, my_snake: FutureSnake):
        first_step = my_snake.get_my_first_step()
        is_food_available = self._current_future_board.is_food_available_for(my_snake)
        is_no_food_yet = self._was_no_food_found_in_this_direction_until_now(my_snake)
        if is_no_food_yet and is_food_available:
            self._save_food_info(first_step)

    def _was_no_food_found_in_this_direction_until_now(self, my_snake: FutureSnake):
        first_step = my_snake.get_my_first_step()
        return self._found_first_food_after_n_steps[first_step] is None

    def _save_food_info(self, first_step):
        self._found_first_food_after_n_steps[first_step] = AmountOfSteps(
            self._current_future_board.simulated_turns
        )

    def _increment_snake_alive_counter(self, my_snake: FutureSnake):
        first_step = my_snake.get_my_first_step()
        amount_of_steps = AmountOfSteps(self._current_future_board.simulated_turns)
        amount_of_snakes_alive = self._counter_of_snakes_alive_after_n_steps[
            first_step
        ].get(amount_of_steps, 0)
        self._counter_of_snakes_alive_after_n_steps[first_step][
            amount_of_steps
        ] = AmountOfSnakesAlive(amount_of_snakes_alive + 1)

    def _check_for_dangerous_snake_in_first_step(self, my_snake: FutureSnake):
        if self._current_future_board.simulated_turns > 1:
            return
        is_danger_ahead = (
            self._current_future_board.does_my_snake_bite_or_collide_with_another_snake(
                my_snake
            )
        )
        first_step = my_snake.get_my_first_step()
        self._dangerous_snake_first_step[first_step] = is_danger_ahead

    def my_snake_found_food_after_how_many_steps(
        self, first_step: NextStep
    ) -> Optional[int]:
        return self._found_first_food_after_n_steps[first_step]

    def all_my_snakes_definitely_dead_after_how_many_steps(
        self, first_step: NextStep
    ) -> int:
        counter_first_step = self._counter_of_snakes_alive_after_n_steps[first_step]
        if len(counter_first_step.keys()) == 0:
            return 1
        return max(counter_first_step.keys()) + 1

    def is_dangerous_snake_in_first_step(self, first_step: NextStep):
        return self._dangerous_snake_first_step[first_step]


class Tactics:
    def __init__(self, history: MyFutureHistory):
        self._history = history

    def decide(self) -> NextStep:
        surviors_first_steps = self._get_first_steps_of_latest_survivor()
        # Remove dangerous steps
        surviors_first_steps = {
            step
            for step in surviors_first_steps
            if not self._history.is_dangerous_snake_in_first_step(step)
        }
        #
        food_after = self._get_first_food_for(surviors_first_steps)
        if food_after:
            shortest_way_to_food = min(food_after.keys())
            return food_after[shortest_way_to_food]
        elif surviors_first_steps:
            return random.choice(list(surviors_first_steps))
        else:
            # die like a snake!
            return NextStep.UP

    def _get_first_food_for(
        self, surviors_first_steps
    ) -> dict[AmountOfSteps, NextStep]:
        food_after: dict[AmountOfSteps, NextStep] = dict()
        for step in surviors_first_steps:
            amount_of_steps = self._history.my_snake_found_food_after_how_many_steps(
                step
            )
            if amount_of_steps is not None:
                food_after[AmountOfSteps(amount_of_steps)] = step
        return food_after

    def _get_first_steps_of_latest_survivor(self) -> set[NextStep]:
        surviors_first_steps = set()
        for max_steps in range(FORECAST_DEPTH, 0, -1):
            surviors_first_steps = self._find_survivors(max_steps)
            if surviors_first_steps:
                break
        return surviors_first_steps

    def _find_survivors(self, max_steps: int):
        return {
            step
            for step in NextStep
            if self._history.all_my_snakes_definitely_dead_after_how_many_steps(step)
            > max_steps
        }
